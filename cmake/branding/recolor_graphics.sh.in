#!/usr/bin/env bash
set -e # Exit on first error
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Common icon resolutions
WINDOWS_SIZES=(16 32 48 64 128)
APPLE_SIZES=(16 32 128 256 512)
LINUX_SIZES=(16 24 32 48 64 96 128)
# Fallback svg to use if an exact match can't be found
FALLBACK_SIZE=64

# CMake variables
PROJECT_NAME="@PROJECT_NAME@"
VERSION="@VERSION@"
LMMS_RELEASE_TYPE="@LMMS_RELEASE_TYPE@"
LMMS_BUILD_APPLE="@LMMS_BUILD_APPLE@"
LMMS_BUILD_WIN32="@LMMS_BUILD_WIN32@"

# File patterns for icons
MULTIRES_PATTERNS=("icon" "project")

pushd "$DIR" >/dev/null

# HTML color codes to search for
# CIRCLE-CI: Comment out unused colors or fall victim to the dredded shellcheck SC2034
HTML_GREEN=("#27ab5f" "#249a56" "#34d07b")
HTML_BLUE=("#3992cb" "#2b6fc5" "#3992cb")
HTML_PURPLE=("#5547bd" "#493ba1" "#7871c5")

REGEX_FIND=("${HTML_GREEN[@]}")

echo "-- Creating LMMS_RELEASE_TYPE=\"$LMMS_RELEASE_TYPE\" resources for \"$PROJECT_NAME $VERSION\"..."
case "$LMMS_RELEASE_TYPE" in
	Stable) REGEX_REPLACE=("${HTML_GREEN[@]}");;
	Beta) REGEX_REPLACE=("${HTML_BLUE[@]}");;
	Nightly|Unknown|*) REGEX_REPLACE=("${HTML_PURPLE[@]}");;
esac

# Prepare sed colorize expression
REGEX_FULL=""
for i in "${!REGEX_FIND[@]}"; do
	REGEX_FULL+="s/${REGEX_FIND[$i]}/${REGEX_REPLACE[$i]}/g;"
	# FIXME: Should we quietly exit if REGEX_FIND == REGEX_REPLACE?
done

if [ -n "$LMMS_BUILD_APPLE" ]; then
	ICON_FORMAT="icns"
	ICON_SIZES=("${APPLE_SIZES[@]}")
	ICON_DEST="../apple"
elif [ -n "$LMMS_BUILD_WIN32" ]; then
	ICON_FORMAT="ico"
	ICON_SIZES=("${WINDOWS_SIZES[@]}")
	ICON_DEST="../nsis"
else
	ICON_FORMAT="all"
	ICON_SIZES=("${LINUX_SIZES[@]}")
	ICON_DEST="../linux"
fi

# Process colors in all SVG files, export raster imgages
pushd svg >/dev/null
echo "--   Branding svg files at their native resolutions..."
for svg in *.svg; do
	# Overwrite svg's in place, since we're working from a copy
	sed -i "" "$REGEX_FULL" "$svg"

	pngx1="../png/${svg/%.svg/.png}"
	pngx2="../png/${svg/%.svg/@2.png}"
	pngx4="../png/${svg/%.svg/@4.png}"
	res="$(echo "$svg"|sed -E 's/(.)*_//g' |cut -d 'x' -f1)"

	# Handle the splash screen
	# Important, for this to work, INSTALL_DATA_SUBDIRS(...) must be called in data/themes THEN cmake/branding
	if [[ $svg == *"splash"* ]]; then
		pngx1="../data/themes/default/splash.png"
	fi

	# Export rasterized versions to a folder called /png/
	mkdir -p "$(dirname $pngx1)"
	if [ "$res" -eq "$res" ] 2>/dev/null; then # integer
		# Windows UWP tile is always 4x
		if [[ $svg == *"windows-tile"* ]]; then
			rsvg-convert "$svg" -w "$((res * 4))" -h "$((res * 4))" -o "$pngx4"
		else
			rsvg-convert "$svg" -w "$res" -h "$res" -o "$pngx1"
			rsvg-convert "$svg" -w "$((res * 2))" -h "$((res * 2))" -o "$pngx2"
		fi
	else
		rsvg-convert "$svg" -o "$pngx1"
	fi
done

# Handle orphaned dimensions where no SVG exists (e.g. 128x128 on macOS)
echo "--   Branding missing files for this platform..."
for res in "${ICON_SIZES[@]}"; do
	for pattern in "${MULTIRES_PATTERNS[@]}"; do
		# Check for missing sizes
		pngx1="../png/${pattern}_${res}x${res}.png";
		pngx2="../png/${pattern}_${res}x${res}@2.png";
		lookfor="${pattern}_${res}x${res}.svg"
		fallback="${pattern}_${FALLBACK_SIZE}x${FALLBACK_SIZE}.svg"
		if [ ! -f "$lookfor" ]; then
			rsvg-convert "$fallback" -w "$res" -h "$res" -o "$pngx1"
			rsvg-convert "$fallback" -w "$((res * 2))" -h "$((res * 2))" -o "$pngx2"
		fi
	done
done

# TODO: Remove montage preview code
echo "--   Branding montage preview..."
montage=""
for pattern in "${MULTIRES_PATTERNS[@]}"; do
	for res in "${ICON_SIZES[@]}"; do
		montage+=" ../png/${pattern}_${res}x${res}.png"
	done
done
montage+=" ../png/windows-tile_48x48@4.png"
montage+=" ../data/themes/default/splash.png"
outfile="$HOME/Desktop/${LMMS_RELEASE_TYPE}_preview.png"
# shellcheck disable=SC2086
montage $montage -mode Concatenate -background transparent -tile "${#ICON_SIZES[@]}x" "$outfile"
convert "$outfile" -trim +repage "$outfile"

popd >/dev/null

# Handle files needed at packaging time (.ico, .icns, etc)
echo "--   Branding $ICON_FORMAT file(s)..."
for pattern in "${MULTIRES_PATTERNS[@]}"; do
	case "$ICON_FORMAT" in
		icns)  # Apple
			rm -rf "$pattern.iconset"
			mkdir -p "$pattern.iconset" # .iconset suffix required
			for res in "${APPLE_SIZES[@]}"; do
				cp "png/${pattern}_${res}x${res}.png" "$pattern.iconset/icon_${res}x${res}.png"
				cp "png/${pattern}_${res}x${res}@2.png" "$pattern.iconset/icon_${res}x${res}@2.png"
			done
			iconutil -c icns "$pattern.iconset" -o "$ICON_DEST/$pattern.icns"
			echo "--     $ICON_DEST/$pattern.icns"
			;;
		ico)    # Windows
			mkdir -p "$ICON_DEST"
			convert "png/${pattern}_*.png" -background transparent "$ICON_DEST/$pattern.ico"
			echo "  - $ICON_DEST/$pattern.ico"
			# Create nsis banner
			if [ "$pattern" == "icon" ]; then
				# Create a white banner for the nsis installer
				convert -size 150x57 canvas: nsis_canvas.png
				convert nsis_canvas.png "png/${pattern}_64x64.png" -gravity center -geometry -25+1 -composite -colors 256 "$ICON_DEST/nsis_branding.bmp"
				rm -f nsis_canvas.png
				echo "--     $ICON_DEST/nsis_branding.bmp"

				# Rewrite the UWP tile manifest BackgroundColor
				sed -i "" "$REGEX_FULL" "$ICON_DEST/lmms.VisualElementsManifest.xml"
			fi
			;;
		*)       # Linux
			# FIXME, build linux directory structure
			echo "Warning: Linux isn't generating themed files."
			;;
	esac
done

echo "--   Cleaning branding temp files..."
rm -rf ./*.iconset

popd >/dev/null