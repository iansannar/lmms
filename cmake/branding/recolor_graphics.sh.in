#!/usr/bin/env bash
set -e # Exit on first error
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Common icon resolutions, fee free to change
WINDOWS_SIZES=(16 32 48 64 128)
APPLE_SIZES=(16 32 128 256 512)
LINUX_SIZES=(16 24 32 48 64 96 128)
 # Fallback svg to use if an exact match can't be found
FALLBACK_SIZE=64

# File patterns for icons
MULTIRES_PATTERNS=("icon" "project")

pushd $DIR >/dev/null

REGEX_FIND=("#27ab5f" "#249a56" "#34d07b") # green branding

echo "Creating LMMS_RELEASE_TYPE=\"@LMMS_RELEASE_TYPE@\" resources for \"@PROJECT_NAME@ @VERSION@\"..."
case "@LMMS_RELEASE_TYPE@" in
	Stable) REGEX_REPLACE=("#27ab5f" "#249a56" "#34d07b");;
	Beta) REGEX_REPLACE=("#09a9d9" "#0267c1" "#35a9d0");;
	Nightly) REGEX_REPLACE=("#fad200" "#ffa40f" "#ffe14d");;
	*) REGEX_REPLACE=("#780116" "#c51306" "#d03535");;
esac

# Prepare sed colorize expression
REGEX_FULL=""
for i in "${!REGEX_FIND[@]}"; do
	REGEX_FULL+="s/${REGEX_FIND[$i]}/${REGEX_REPLACE[$i]}/g;"
	# FIXME: Should we quietly exit if REGEX_FIND == REGEX_REPLACE?
done

# shellcheck disable=SC2157
if [ -n "@LMMS_BUILD_APPLE@" ]; then
	FORMAT="icns"
	SIZES=("${APPLE_SIZES[@]}")
	DEST="../apple"
elif [ -n "@LMMS_BUILD_WIN32@" ]; then
	FORMAT="ico"
	SIZES=("${WINDOWS_SIZES[@]}")
	DEST="../nsis"
else
	FORMAT="all"
	SIZES=("${LINUX_SIZES[@]}")
	DEST="../linux"
fi

# Process colors in all SVG files, export raster imgages
pushd svg >/dev/null
echo "- Processing svg files at their native resolutions..."
for svg in *.svg; do
	echo -n "  - $svg "
	# Overwrite svg's in place, since we're working from a copy
	sed -i "" "$REGEX_FULL" "$svg"

	tally=""
	pngx1="../png/$(echo "$svg"|sed 's/.svg$/.png/g')"
	pngx2="../png/$(echo "$svg"|sed 's/.svg$/@2.png/g')"
	pngx4="../png/$(echo "$svg"|sed 's/.svg$/@4.png/g')"
	res="$(echo "$svg"|sed -E 's/(.)*_//g' |cut -d 'x' -f1)"

	# Handle the splash screen
	# Important, for this to work, INSTALL_DATA_SUBDIRS(...) must be called in data/themes THEN cmake/branding
	if [[ $svg == *"splash"* ]]; then
		pngx1="../data/themes/default/splash.png"
	fi

	# Export rasterized versions to a folder called /png/
	mkdir -p "$(dirname $pngx1)"
	if [ "$res" -eq "$res" 2>/dev/null ]; then # integer
		# Windows UWP tile is always 4x
		if [[ $svg == *"windows-tile"* ]]; then
			rsvg-convert "$svg" -w "$((res * 4))" -h "$((res * 4))" -o "$pngx4"
			tally+="$pngx4"
		else
			rsvg-convert "$svg" -w "$res" -h "$res" -o "$pngx1"
			rsvg-convert "$svg" -w "$((res * 2))" -h "$((res * 2))" -o "$pngx2"
			tally+="$pngx1 $pngx2"
		fi
	else
		rsvg-convert "$svg" -o "$pngx1"
		tally+="$pngx1"
	fi
	echo " -> { $tally }"
done

# Handle orphaned dimensions where no SVG exists (e.g. 128x128 on macOS)
echo "- Processing missing files for this platform..."
for res in "${SIZES[@]}"; do
	for pattern in "${MULTIRES_PATTERNS[@]}"; do
		# Check for missing sizes
		png="../png/${pattern}_${res}x${res}.png";
		pngx2="../png/${pattern}_${res}x${res}@2.png";
		lookfor="${pattern}_${res}x${res}.svg"
		fallback="${pattern}_${FALLBACK_SIZE}x${FALLBACK_SIZE}.svg"
		if [ ! -f "$lookfor" ]; then
			rsvg-convert $fallback -w "$res" -h "$res" -o "$png"
			rsvg-convert "$fallback" -w "$((res * 2))" -h "$((res * 2))" -o "$pngx2"
			echo "  - $fallback -> { $png $pngx2 }"
		fi
	done
done

popd >/dev/null

# Handle files needed at packaging time (.ico, .icns, etc)
echo "- Generating $FORMAT file(s)..."
for pattern in "${MULTIRES_PATTERNS[@]}"; do
	case "$FORMAT" in
		icns)  # Apple
			rm -rf "$pattern.iconset"
			mkdir -p "$pattern.iconset" # .iconset suffix required
			for res in "${APPLE_SIZES[@]}"; do
				cp "png/${pattern}_${res}x${res}.png" "$pattern.iconset/icon_${res}x${res}.png"
				cp "png/${pattern}_${res}x${res}@2.png" "$pattern.iconset/icon_${res}x${res}@2.png"
			done
			iconutil -c icns "$pattern.iconset" -o "../apple/$pattern.icns"
			echo "  - ../apple/$pattern.icns"
			;;
		ico)    # Windows
			mkdir -p "../nsis"
			convert png/$pattern_*.png -background transparent "../nsis/$pattern.ico"
			echo "  - ../nsis/$pattern.ico"
			# Create nsis banner
			if [ "$pattern" == "icon" ]; then
				# create a white banner for the nsis installer
				convert -size 150x57 canvas: nsis_canvas.png
				convert nsis_canvas.png "png/${pattern}_64x64.png" -gravity center -geometry -25+1 -composite -colors 256 "../nsis/nsis_branding.bmp"
				rm -f nsis_canvas.png
				echo "  - ../nsis/nsis_branding.bmp"

				# Rewrite the UWP tile
				sed -i "" "$REGEX_FULL" "../nsis/lmms.VisualElementsManifest.xml"
			fi
			;;
		*)       # Linux
			# FIXME, build linux directory structure
			echo "Warning: Linux isn't generating themed files."
			;;
	esac
done

echo "- Cleaning up temporary files..."
rm -rf *.iconset

popd >/dev/null